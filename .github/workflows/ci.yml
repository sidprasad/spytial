name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest>=7.0.0 flake8>=6.0.0 black>=23.0.0
        
    - name: Run code formatting check (non-blocking)
      run: |
        echo "üé® Checking code formatting..."
        black --check spytial/ || echo "‚ö†Ô∏è Code formatting issues found (non-blocking)"
        
    - name: Run linting (non-blocking)
      run: |
        echo "üîç Running linting checks..."
        flake8 spytial/ --count --statistics --max-line-length=88 --extend-ignore=E203,W503 || echo "‚ö†Ô∏è Linting issues found (non-blocking)"
        
    - name: Run tests
      run: |
        python -m pytest test/ -v
        
    - name: Test import and basic functionality
      run: |
        python -c "
        import spytial
        print('‚úì Import successful')
        # Test basic diagram generation
        result = spytial.diagram({'test': [1,2,3]}, method='file', auto_open=False)
        print(f'‚úì Basic diagram generation: {result}')
        # Test validation scenarios from instructions
        import os
        assert os.path.exists(result)
        print('‚úì File output validation passed')
        "

  build-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check distribution
      run: |
        twine check dist/*
        
    - name: Test install from built package
      run: |
        pip install dist/*.whl
        python -c "import spytial; print('‚úì Package install test passed')"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/
